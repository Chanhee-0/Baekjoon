#include<iostream>
#include<vector>
#include<list>
#include<algorithm>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, k, we, pri;
	long long cnt = 0;
	list<int> c;
	list<int>::iterator liter;
	vector<pair<int, int>> v;

	cin >> n >> k;
	for (int i = 0; i < n; i++) {
		cin >> we >> pri;
		v.push_back(make_pair(pri, we));
	}
	for (int i = 0; i < k; i++) {
		cin >> we;
		c.push_back(we);
	}

	sort(v.rbegin(), v.rend()); // 가격 기준 내림차순으로 정렬
	c.sort(); // 가방 무게 기준 오름차순으로 정렬

	for (int i = 0; i < n; i++) {
		if (c.size() == 0) // 가방이 없으면 멈춤
			break;
		else if (v[i].second > c.back()) // 제일 수용 무게가 큰 가방보다 보석이 무거우면 넘김
			continue;
		for (liter = c.begin(); liter != c.end(); liter++ ) { // 가벼운 가방부터 참조하며 보석의 무게가 가방의 무게보다 낮다면 가격을 더해주고 가방 삭제
			if (v[i].second <= *liter) {
				cnt += v[i].first;
				c.erase(liter);
				break;
			}
		}
	}
	cout << cnt;
	
	return 0;
}
/*
1202 보석 도둑
가방 삭제
1. 보석은 가격은 내림차순으로 가방의 무게는 오름차순으로 정렬
2. 가격이 높은 보석부터 가방의 낮은 무게부터 참조하며 가방의 무게보다 낮으면 가방 pop
3. 가방의 size가 0이 되면 종료
 -> 시간 초과
보석 삭제
1. 보석과 가방을 무게 기준 오름차순한다.
2. 보석의 무게가 가방 무게를 넘지 않은 범위 내에서 가장 큰 가격의 보석을 반환 후 삭제
3. 반복
5 2
100 100
50 100
40 20
10 10
10 100
20 80
*/
#include<iostream>
#include<queue>
#include <set>
#include<algorithm>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, k, wei, pri;
	long long cnt = 0;
	priority_queue<pair<int, int>> pq;
	multiset<int> bags;

	cin >> n >> k;
	for (int i = 0; i < n; i++) { // 우선 순위 큐에 가격 내립차순으로 삽입
		cin >> wei >> pri;
		pq.push({ pri, wei });
	}
	for (int i = 0; i < k; i++) { // 멀티셋에 가방 무게 오름차순으로 삽입
		cin >> wei;
		bags.insert(wei);
	}

	while (!pq.empty()) {
		pri = pq.top().first;
		wei = pq.top().second;
		pq.pop();

		multiset<int>::iterator iter = bags.lower_bound(wei); // 가방 무게와 같거나 그 다음 반복자 반환
		if (iter == bags.end()) // 맞는 가방 무게 없음
			continue;

		bags.erase(iter); // 있으면 가방 지우고 더해 줌
		cnt += pri;
	}

	cout << cnt;
	
	return 0;
}
/*
1202 보석 도둑
가방 삭제
1. 보석은 가격은 내림차순으로 가방의 무게는 오름차순으로 정렬
2. 가격이 높은 보석부터 가방의 낮은 무게부터 참조하며 가방의 무게보다 낮으면 가방 pop
3. 가방의 size가 0이 되면 종료
 -> 시간 초과

우선 순위 큐와 멀티 셋 활용
정렬의 시간이 사라진다.
1. 보석은 가격 기준 우선 순위 큐에 가방 수용 무게는 멀티셋에 저장
2. 큐에서 가격이 높은 순으로 가격과 무게를 빼와 lower_bound()를 활용하여 최적의 가방 무게를 찾아 있으면 답에 가격을 더해주고 가방 삭제 없으면 continue
5 2
100 100
50 100
40 20
10 10
10 100
20 80
*/
