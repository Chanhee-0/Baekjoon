#include<iostream>
#include<string>
#include<array>
#include<algorithm>
#include<cmath>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, index, cnt = 0;
	string s[10];
	array<int, 26> alpha = { 0 };

	cin >> n;
	
	for (int i = 0; i < n; i++)
		cin >> s[i];

	for (int i = 0; i < n; i++) { // 알파벳을 검사하여 그에 따른 배열에 단윗수 저장
		index = pow(10, (s[i].size() - 1));
		for (int j = 0; j < s[i].size(); j++) {
			alpha[int(s[i][j]) - 65] += index;
			index /= 10;
		}
	}
	sort(alpha.rbegin(), alpha.rend());
	index = 9;
	for (int i = 0; i < 9; i++) {
		cnt += alpha[i] * index;
		index--;
	}

	cout << cnt;

	return 0;
}
/*
1339 단어 수학
자릿수를 이용하여 푼다.
aabb + babb // 사이즈와 앞자리가 같고 b가 하나가 많은 경우
1200 * a + 1022 * b

1. 알파벳이 들어있는 string의 size를 재고 어떤 알파벳이 어떤 자릿수에 있는지 확인하고 array에 더해준다.
	ex) size = 4, alpha[A-65] += 1000;
2. array[25] = {0} 만들어서 각 알파벳 해당하는 자리에 단위로 채워 넣는다.
3. 제일 큰 수로 정렬하고 9부터 1로 차례대로 곱하며 다 더함
*/
