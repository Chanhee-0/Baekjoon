#include<iostream>
#include<queue>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, box;
	int cnt = 0;
	priority_queue<int> pq;

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> box;
		pq.push(box);
	}

	while (pq.size() > 0) {
		box = pq.top();
		pq.pop();
		if (box == 0 && pq.size() % 2 == 0) // 0이 들어 왔을때 남은 수(음수)들의 갯수가 짝수라면 0 뛰어 넘고 진행
			continue;
		else if (box < 0 && pq.size() % 2 == 0) {
			cnt += box;
			continue;
		}
		if (pq.size() == 0) {
			cnt += box;
			break;
		}
		if (box * pq.top() > box + pq.top()) { // 곱한 값이 큰 경우
			cnt += box * pq.top();
			pq.pop();
		}
		else { // 작거나 같으면 top 값만 더해준다.
			cnt += box;
		}
	}
	cout << cnt;

	return 0;
}
/*
1744 수 묶기
1. priority_queue로 받고 큰 수부터 내보내며 곱한 값이 더한 값보다 크면 cnt에 top과 더해주고 아닌경우 top값만 cnt에 더해준다.
2. pq.size() == 0면 cnt에 더해주고 끝낸다.
3. 반복
0이나 음수를 처리해주는 과정을 생각 하지 않아서 틀림
0이 들어왔을 때나 음수가 들어왔을 때 나머지 음수들의 갯수에 따라 대처법을 마련함.
*/
