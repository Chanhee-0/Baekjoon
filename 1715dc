#include<iostream>
#include<array>
#include<algorithm>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, box;
	long long cnt = 0;
	array <int, 100000> card;

	cin >> n;

	for (int i = 0; i < n; i++)
		cin >> card[i];

	sort(card.begin(), card.begin() + n);

	box = card[0];
	for (int i = 1; i < n; i++) {
		cnt += box + card[i];
		box = box + card[i];
	}
	cout << cnt;

	return 0;
}
/*
1715 카드 정렬하기
1. 정렬
2. 전의 결과 + 이번거
3. 반복
10 20 30 40 -> (10+20)+(30+30)+(60+40)=190
*/

#include<iostream>
#include<list>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, box;
	long long cnt = 0;
	list<int> card;
	list<int>::iterator liter;

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> box;
		card.push_back(box);
	}
	card.sort();
	cout << endl;

	while (card.size() > 1) {
		cnt += card.front() + (card.front() + 1); // 10 20 30시 10 + 11이 돼버림
		box = card.front() + (card.front() + 1);
		card.push_back(box);
		card.pop_front();
		card.pop_front();
		for (liter = card.begin(); liter != card.end(); ++liter) {
			cout << *liter << endl;
		}
	}
	while (1) { // 박스의 자리를 찾는다.
		liter = card.begin();
		if (box > *liter)
			liter++;
		else {
			card.insert(liter, box);
			break;
		}
	}

	cout << cnt;

	return 0;
}
/*
1715 카드 정렬하기
1. 정렬
2. 전의 결과 + 이번거
3. 반복
1 2 7 -> 3 7 (3 -> 10 (13
1 2 7 8 9 -> 3 7 8 9(3 -> 
1 2 4 5 -> 3 4 5 (3 -> 5 7 (12 -> 12 (24
5 6 7 8 -> 7 8 11 (11 -> 11 15 (26 -> 26 (52
1 2 7 8 -> 7 8 3 (3 -> 3 15 (18 -> 18 (36
1 2 7 8 -> 3 7 8 (3 -> 8 10 (13 -> 18 (31
*/

#include<iostream>
#include<list>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, box;
	long long cnt = 0;
	list<int> card;
	list<int>::iterator liter;

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> box;
		card.push_back(box);
	}
	card.sort();

	while (1) {
		if (card.size() == 2) { // 2개 남았을 경우 그냥 더해주고 끝냄
			cnt += card.front();
			card.pop_front();
			cnt += card.front();
			break;
		}
		box = card.front();
		card.pop_front();
		cnt += box + card.front();
		box += card.front();
		card.pop_front();
		if (box > card.back()) // 맨 뒷값보다 클 경우 그냥 맨 뒤에 넣는다.
			card.push_back(box);
		else {
			for (liter = card.begin(); liter != card.end(); ++liter) { // 새로운 값의 자리를 찾는다.
				if (box <= *liter) {
					card.insert(liter, box);
					break;
				}
			}
		}
	}

	cout << cnt;

	return 0;
}
/*
1715 카드 정렬하기
1. 정렬
2. 전의 결과 + 이번거
3. 반복
1 2 7 -> 3 7 (3 -> 10 (13
1 2 7 8 9 -> 3 7 8 9(3 -> 
1 2 4 5 -> 3 4 5 (3 -> 5 7 (10 -> 12 (22
5 6 7 8 -> 7 8 11 (11 -> 11 15 (26 -> 26 (52
1 2 7 8 -> 7 8 3 (3 -> 3 15 (18 -> 18 (36
1 2 7 8 -> 3 7 8 (3 -> 8 10 (13 -> 18 (31
 시간 초과 ㅠ 값의 자리를 찾는 경우에서 버킷 정렬을 이용해 봐야겠다.
*/

#include<iostream>
#include<list>
#include<queue>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, box;
	long long cnt = 0;
	list<int> card;
	list<int>::iterator liter;
	queue<int> q[10];

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> box;
		card.push_back(box);
	}
	card.sort();

	while (1) {
		if (card.size() == 2) { // 2개 남았을 경우 그냥 더해주고 끝냄
			cnt += card.front();
			card.pop_front();
			cnt += card.front();
			break;
		}
		box = card.front();
		card.pop_front();
		cnt += box + card.front();
		box += card.front();
		card.pop_front();
		card.push_back(box);
		int Radix = 1;
		while (1) { // 자릿수 알아보기
			if (Radix >= 10000)
				break;
			Radix *= 10;
		}
		for (int i = 1; i < Radix; i *= 10) { // 기수 정렬
			for (liter = card.begin(); liter != card.end(); ++liter) {
				int k;
				if (*liter < i)
					k = 0;
				else
					k = (*liter / i) % 10;
				q[k].push(*liter);
			}
			card.clear();
			for (int j = 0; j < 10; j++) {
				while (q[j].empty() == 0) {
					card.push_back(q[j].front());
					q[j].pop();
				}
			}

		}
	}

	cout << cnt;

	return 0;
}
/*
1715 카드 정렬하기
1. 정렬
2. 전의 결과 + 이번거
3. 반복
1 2 7 -> 3 7 (3 -> 10 (13
1 2 7 8 9 -> 3 7 8 9(3 ->
1 2 4 5 -> 3 4 5 (3 -> 5 7 (10 -> 12 (22
5 6 7 8 -> 7 8 11 (11 -> 11 15 (26 -> 26 (52
1 2 7 8 -> 7 8 3 (3 -> 3 15 (18 -> 18 (36
1 2 7 8 -> 3 7 8 (3 -> 8 10 (13 -> 18 (31
 기수 정렬 적용했는데도 시간초과..
*/

#include<iostream>
#include<queue>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, box;
	long long cnt = 0;
	priority_queue<int, vector<int>, greater<int> > pq;

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> box;
		pq.push(box);
	}

	while (pq.size() > 1) {
		box = pq.top();
		pq.pop();
		cnt += box + pq.top();
		box += pq.top();
		pq.pop();
		pq.push(box);
	}

	cout << cnt;

	return 0;
}
/*
1715 카드 정렬하기
우선순위 큐 오름차순 정렬로 변경 후 사용
1 2 7 -> 3 7 (3 -> 10 (13
1 2 7 8 9 -> 3 7 8 9(3 ->
1 2 4 5 -> 3 4 5 (3 -> 5 7 (10 -> 12 (22
5 6 7 8 -> 7 8 11 (11 -> 11 15 (26 -> 26 (52
1 2 7 8 -> 7 8 3 (3 -> 3 15 (18 -> 18 (36
1 2 7 8 -> 3 7 8 (3 -> 8 10 (13 -> 18 (31
처음에 array를 이용해 보고 싶어 공부 -> 시간 초과
list가 효율적인 것 같아 공부 후 사용 -> 시간 초과
list를 사용하여 만들어 놓은 코드에 기수 정렬 적용 -> 시간 초과
다른 문제 풀면서 multiset과 priority queue 공부한 뒤 priority queue로 너무나 간단하게 성공
무었을 어디에 사용하는가 가 많은 것을 결정한다는 것을 깨닳음.
*/
