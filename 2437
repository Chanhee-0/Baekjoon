#include<iostream>
#include<set>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int  n, var, cnt = 0, num;
	multiset<int> ms;
	multiset<int>::iterator iter;

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> var;
		ms.insert(var);
	}

	for (int i = 1; i < 4; i++) {
		if (ms.find(i) == ms.end()) {
			cout << i;
			return 0;
		}
	}
	for (int i = 7; i < 1000000; i*=2) {
		if (ms.find(i) == ms.end()) {
			num = i / 2;
			break;
		}
	}
	for (iter = ms.begin(); iter != ms.lower_bound(num); iter++) {
		cnt += *iter;
	}
	cnt += num + 1;

	cout << cnt;

	return 0;
}
/*
2437 저울
1. 다 컨테이너에 넣어두고 작은 수부터 뺀다.
2. 1 2 3이 존재하는 경우 4 5 6이 가능해진다.
3. 7 * 2^i <- 식으로 해당되지 않는 값을 찾고 그 값이 없는 경우 그 아래의 모든 수를 더해준 다음값이 답이다.
1 2 4 8
7
3 1 6 2 7 30 1
1 1 2 3 6 7 30 -> 14가 없음 14 아래의 모든 값 더해주면 20 답은 다음 수인 21
1 2 3 4 5 6 7 8 9 10 11
*/
#include<iostream>
#include<set>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int  n, var, cnt = 0, num;
	multiset<int> ms;
	multiset<int>::iterator iter;

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> var;
		ms.insert(var);
	}

	for (int i = 1; i < 4; i++) { // 1 2 3이 있는지 검사
		if (ms.find(i) == ms.end()) {
			cout << i;
			return 0;
		}
	}
	if (ms.find(4) == ms.end() && ms.find(5) == ms.end() && ms.find(6) == ms.end() && ms.find(7) == ms.end()) { // 넷 다 없으면 끝
		cout << "7";
		return 0;
	}
	num = 7;
	while (1) {
		for (int i = num; i < num * 2; i++) { // 7 ~ 13, 14 ~ 27, 28 ~ 55, ... 사이들을 검사
			if (ms.find(i) != ms.end()) { // 하나라도 있으면 멈추고 다음것 검사
				break;
			}
			if (i == num * 2 - 1 && ms.find(i) == ms.end()) { // 하나도 없으면 검사 범위 아래 숫자들 더한 다음 수가 답
				for (iter = ms.begin(); iter != ms.lower_bound(num); iter++) {
					cnt += *iter;
				}
				cout << ++cnt;
				return 0;
			}
		}
		num *= 2;
	}
}
/*
2437 저울
1. 다 컨테이너에 넣어두고 작은 수부터 뺀다.
2. 1 2 3이 존재하는 경우 4 5 6이 가능해진다.
3. 7 * 2^i <- 식으로 해당되지 않는 값을 찾고 그 전 값(14가 없는경우 7, 28이 없는 경우 14) 아래의 모든 수를 더해준 다음값이 답이다.
1 2 4 8
7
3 1 6 2 7 30 1
1 1 2 3 6 7 30 -> 14가 없음 7 아래의 모든 값 더해주면 20 답은 다음 수인 21
1 2 3 4 5 6 7 8 9 10 11
6
1 2 3 7 10 13
*/#include<iostream>
#include<set>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int  n, var, cnt = 0, num;
	multiset<int> ms;
	multiset<int>::iterator iter;

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> var;
		ms.insert(var);
	}

	for (iter = ms.begin(); iter != ms.end(); iter++) {
		if (cnt + 1 >= *iter)
			cnt += *iter;
		else {
			cout << ++cnt;
			return 0;
		}
	}
	cout << ++cnt;

	return 0;
}
/*
2437 저울
1. 다 필요없고 1 2 3 이후 다음 수는 지금까지 수의 합보다 작아야한다.
그것도 필요 없고 다음 수가 (지금까지 수의 합 + 1)보다 크면 끝
돌아 돌아 3시간 정도 걸린듯 풀어서 뿌듯하긴 한데 너무 돌아온 것 같아서 좀 
*/
