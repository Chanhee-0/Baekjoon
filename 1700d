#include<iostream>
#include<set>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, k, var, cnt = 0;
	set<int> s;

	cin >> n >> k;

	while (k > 0) {
		cin >> var;
		if (s.size() == n) {
			if (s.find(var) == s.end()) {
				auto iter = s.end();
				iter--;
				s.erase(*(iter));
				cnt++;
				s.insert(var);
			}
		}
		else
			s.insert(var);
		k--;
		for (auto iter = s.begin(); iter != s.end(); ++iter)
			cout << *iter << " ";
		cout << endl;
	}

	cout << cnt;

	return 0;
}
/*
1700 멀티탭 스케줄링
1. set에 전기용품 번호를 넣을때 set의 사이즈(멀티탭 구멍수)가 n과 같은지(다 찼는지) 확인하고 n과 같다면
	안에 같은 번호가 존재하는지 찾은 뒤 있다면 패스하고 없다면 마지막 숫자를 빼고 넣는다.

틀림 -> 우선 순위가 낮은 것을 빼는게 아니라 뒤에 사용량이 적거나 없는 것을 먼저 빼는 문제였다.

set을 계속 사용할 것인지도 고민해 봐야함. -> 멀티탭은 그냥 셋으로 스케줄은 정렬되지 않는 셋(중복을 제거하여 누가 먼저 나오는지 보기 용이)을
 사용하여 양쪽에서 모두 find를 사용할수있다는 이점이 생기지만 찾는 수가 뒤쪽에 있다면 의미 없음.
1. 멀티탭이 비었고 중복이 없으면 꽂는다.
2. 멀티탭이 꽉 찼고 중복이 없다면 그 뒤에 숫자들을 탐색한다.
3. 꽂혀있지 않으면 넘기고 꽂혀있다면 그 숫자를 기억하며 무었을 뽑을지 결정한다. <- 어떻게 탐색하여 우선순위를 정할지 방법을 더 고민해봐야 함.
3. 멀티탭은 셋 스케줄은 벡터로 탐색은 반복자로 (중복 몇개 탐색??? 싹 돌아도 셋이기에 중복 잡힘 -> 중복이 잡히면서 숫자 순서가 어떻게 되는지 확인해야함)
 탐색 과정에서 여분의 set을 만들어 스케줄에 멀티탭과 중복이 있다면 정렬되지 않는 set에 저장
 -> 이러면 find 함수도 둘 다 이용가능하여 멀티탭 수를 스케줄에서 찾을 때도 용이
3 14
1 4 3 2 5 4 3 2 5 3 4 2 3 4
1 4 3
2 4 3 1
5 4 3 2
5 2 3 3
4 2 3 4
*/
